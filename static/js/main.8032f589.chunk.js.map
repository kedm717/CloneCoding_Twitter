{"version":3,"sources":["firebase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","REACT_APP_API_ID","firebase","initializeApp","firebaseInstance","dbService","firestore","authService","auth","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChang","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","message","type","placeholder","required","onChange","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","src","width","height","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","data","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8032f589.chunk.js","sourcesContent":["import  firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/firestore\"\nimport \"firebase/compat/storage\"; // 스토리지 임포트\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL:process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_API_ID\n  };\n\n  firebase.initializeApp(firebaseConfig);\n\n  export const firebaseInstance = firebase;\n  export const dbService = firebase.firestore();\n  export const authService = firebase.auth(); \n  export const storageService = firebase.storage();\n  ","import {useState} from \"react\";\nimport { authService} from \"../firebase\";\n\nconst AuthForm = () => {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\") \n    \n    const onChang = (event) => {\n        const {\n            target : {name, value},\n        } = event;\n        if(name === \"email\"){\n            setEmail(value);\n        }\n        else if(name === \"password\"){\n            setPassword(value)\n        }\n    };\n    const onSubmit = async(event) => { //회원가입 분기 시기는 함수\n        event.preventDefault();\n        try{\n            let data;\n            if(newAccount){\n                //creat newAccount\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            }else {\n                //log in\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            }\n           \n        }catch(error){\n           setError(error.message)\n        }\n    };\n    const toggleAccount = () => setNewAccount((prev)=> !prev);\n    return (     \n        <>\n            <form onSubmit= {onSubmit}>\n                <input \n                name =\"email\"\n                type =\"email\" \n                placeholder =\"Email\" \n                required\n                value ={email}\n                onChange={onChang} \n                />\n                <input\n                name = \"password\" \n                type =\"password\" \n                placeholder=\"password\" \n                required\n                value = {password}\n                onChange ={onChang} \n                />\n                <input \n                type =\"submit\" \n                value = {newAccount ? \"create Account\" : \"Log In\"}/>\n                {error}\n            </form>\n            <span onClick ={toggleAccount}>\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n                </span>\n            </>\n    )\n\n};\n\n\n    export default AuthForm;","import AuthForm from \"components/AuthForm\";\nimport { authService , firebaseInstance} from \"../firebase\";\n\nconst Auth = () => {\n    const onSocialClick = async (event) =>{\n       const {\n           target: {name},\n       } = event;\n       let provider;\n       if(name === \"google\"){\n           provider = new firebaseInstance.auth.GoogleAuthProvider();\n       } else if(name === \"github\"){\n           provider = new firebaseInstance.auth.GithubAuthProvider();\n       }\n       const data = await authService.signInWithPopup(provider);\n    } \n\n    return (     \n        <div>\n            <AuthForm />\n            <div>\n                <button onClick ={onSocialClick} name = \"google\">Continue with Google</button>\n                <button onClick ={onSocialClick} name = \"github\">Continue with Github</button>\n            </div>\n            </div>\n    )\n}\nexport default Auth;","import { dbService , storageService } from \"firebase\";\nimport {useState} from \"react\" // 트위터 수정기능을 위한 상태 변경 수정 버튼을 눌렀을 때 화면에 출력해야하는 요소를 위해 2가지 상태를 관리\nconst Tweet = ({tweetObj, isOwner}) => {\n    const [editing, setEditing] = useState(false); //트윗 수정기능1\n    const [newTweet, setNewTweet] = useState(tweetObj.text); // 트위터 수정기능2\n\n    const onDeleteClick = async () => { // 삭제 버튼을 눌렀을때 경고 메세지가 나오면서 확인/취소 창이 나오고 확인을 눌렀을때 true/ 취소 false 가 나오고 삭제해주는 버튼함수\n        const ok = window.confirm(\"삭제 할거임??\");\n       \n        if(ok){\n           await dbService.doc(`tweets/${tweetObj.id}`).delete();\n           if(tweetObj.attachmentUrl !== \"\")\n           await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev)=> !prev); // 수정버튼을 눌렀을때 텍스트가 수정이 되게 하는 함수 \n\n    const onChange = (event) => { // 수정한 내용으로 바꿔주는 함수 \n        const{\n            target : {value},\n        } = event;\n        setNewTweet(value);\n    }\n    const onSubmit = async(event) =>{ // 파이어 베이스에 새로 입력된 값을 반영하는 함수\n        event.preventDefault();\n        await dbService.doc(`Tweets/${tweetObj.id}`).update({ text: newTweet});\n    }\n    return (\n        <div> \n            {editing ? (\n                <>\n                <form onSubmit={onSubmit}>\n                    <input onChange ={onChange} value={newTweet} required/>\n                    <input type =\"submit\" value = \"Update Tweet\" />\n                </form>\n                <button onClick={toggleEditing}>Cancle</button>\n                </>\n            ): (\n                <>\n                <h4>{tweetObj.text}</h4>\n                {tweetObj.attachmentUrl && (\n                    <img src= {tweetObj.attachmentUrl} width =\"50px\" height =\"50px\" />\n                )}\n                {isOwner && (\n                    <>\n                <button onClick = {onDeleteClick}>Delete Tweet</button>\n                <button onClick = {toggleEditing}>Edit Tweet</button>\n                    </>\n                )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Tweet;","import {useState} from \"react\";\nimport { dbService, storageService } from \"firebase\";\nimport {v4 as uuidv4} from \"uuid\";\n\nconst TweetFactory = ({userObj}) => {\n\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\")\n\n    const onSubmit = async(event) =>{\n        event.preventDefault();\n        let attachmentUrl = \"\";\n        if(attachment !== \"\"){\n        const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        const attachmentUrl = await response.ref.getDownloadURL();\n        }\n         await dbService.collection(\"tweets\").add({\n            text : tweet,\n            createAt : Date.now(),\n            creatorId : userObj.uid,\n            attachmentUrl,\n        });\n        setTweet(\"\");\n        setAttachment(\"\");\n    };\n\n    const onChang = (event) => {\n        event.preventDefault();\n        const {\n            target: {value},\n        } = event;\n        setTweet(value);\n    }\n\n    const onFileChange = (event) => {\n        const {\n            target : { files },\n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) =>{\n            const {\n                currentTarget: { result},\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n    };\n    const onClearAttachment = () => setAttachment(\"\");\n\n    return (\n      <form onSubmit= {onSubmit}>\n          <input \n          value = {tweet}\n          onChange ={onChang}\n          type = \"text\"\n          placeholder = \"What`s on your mind?\"\n          maxLength={120}\n          />\n        <input type =\"file\" accept=\"image/*\" onChange ={onFileChange} />\n        <input type =\"submit\" value = \"tweet\" />\n        {attachment && (\n            <div>\n             <img src ={attachment} width=\"50px\" height =\"50px\" />\n            <button onClick={onClearAttachment}>clear</button>\n            </div>\n            )}\n      </form>\n      );\n};\n\nexport default TweetFactory;","import { useEffect,useState} from 'react';\nimport { dbService} from 'firebase';\nimport Tweet from \"components/Tweet\";\n\nimport TweetFactory from 'components/TweetFactory';\n\nconst Home = ({userObj}) => {\n    \n    \n    const [tweets, setTweets] = useState([]) // 받은 데이터로 게사물 목록을 만들기 위한 useState\n  \n    \n    useEffect(()=>{\n        dbService.collection(\"tweets\").onSnapshot((snapshot)=>{\n            const newArray = snapshot.docs.map((document)=>({\n                id: document.id,\n                ...document.data(),\n            }));\n            setTweets(newArray);\n        });\n    },[]);\n\n    \n   \n\n    return (\n        <>\n        <TweetFactory userObj ={userObj}/>\n      <div>\n        {tweets.map((tweet)=>( //트윗 목록이 보이는 맵핑!\n        // Tweet.js로 연결\n            <Tweet key={tweet.id} tweetObj = {tweet}\n            isOwner ={tweet.creatorId === userObj.uid}\n            />\n        ))}\n      </div>\n      </>\n    );\n};\n\nexport default Home;","import { authService, dbService } from \"../firebase\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect} from \"react\";\n\n\nconst Profile = ({userObj, refreshUser }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const onLogOutClick =() =>{\n        authService.signOut();\n        history.push(\"/\")\n    };\n\n    const onChange =(event) => {\n        const {\n            target: {value}\n        } =event;\n        setNewDisplayName(value);\n    };\n\n    const onSubmit =async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({ displayName : newDisplayName });\n            refreshUser();\n        }\n    };\n\n\n    //주소 이동 로그아웃 될시 \n    return (\n        <>\n        <form onSubmit ={onSubmit}>\n        <input type =\"text\" placeholder= \"DisplayName\" onChange ={onChange} value={newDisplayName}/>\n        <input type =\"submit\" value = \"Update Profile\" />\n        </form>\n        <button onClick ={onLogOutClick}>Log Out</button>\n        </>\n    );\n};\n\nexport default Profile;","import {Link} from \"react-router-dom\";\n\nconst Navigation = ({userObj}) => {\n    return <nav>\n    <ul>\n        <li>\n            <Link to = \"/\">Home</Link>\n        </li>\n        <li>\n            <Link to = \"/profile\">{userObj.displayName}의 Profile</Link>\n        </li>\n    </ul>\n    </nav>\n};\n\nexport default Navigation;","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Profile from 'routes/Profile';\nimport Navigation from './Navigation';\n\n\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => { /*상위 컴포넌트에서 받은 프롭스는 구조분해 할당으로 사용*/\n  \n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n      {isLoggedIn ? (\n        <>\n        <Route exact={true} path = \"/\">\n          <Home userObj={userObj}/>\n        </Route>\n        <Route exact={true} path = \"/profile\">\n        <Profile refreshUser={refreshUser} userObj= {userObj} />\n      </Route>\n      </>\n      ) : (\n        <Route exact = {true}>\n          <Auth />\n        </Route>\n      )}\n      \n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n\n\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useEffect,useState} from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"../firebase\";\n\n\n\nfunction App(){\n  const [init, setInit] = useState(false)\n  const [userObj, setUserObj] = useState(null); // 트윗을 작성한 유저 정보를 보여주기 위한 useState\n\n\n  useEffect(()=>{\n    authService.onAuthStateChanged((user) =>{\n      if(user){\n        setUserObj({\n          uid: user.uid,\n          displayName : user.displayName,\n          updateProfile: (args)=> user.updateProfile(args),\n        });\n      }\n      else {\n      setUserObj(false);\n      }\n      setInit(true);\n    });\n\n  },[]);\n\n  const refreshUser = () => { // 함수가 실행되면 인증 모듈에서 authService.currentUser를 통해 얻은 새 user를 업데이트 해줌.\n   const user = authService.currentUser;\n   setUserObj({\n     uid: user.uid,\n     displayName: user.displayName,\n     updateProfile: (args) => user.updateProfile(args),\n   })\n  }\n  \n  return (\n  <>\n  { init ? <AppRouter \n  isLoggedIn ={Boolean(userObj)} \n  userObj ={userObj} \n  refreshUser ={refreshUser}\n  /> : \"initializing...\"}\n  </>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}