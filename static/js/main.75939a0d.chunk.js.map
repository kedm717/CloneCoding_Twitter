{"version":3,"sources":["firebase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","REACT_APP_API_ID","firebase","initializeApp","firebaseInstance","dbService","firestore","authService","auth","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChang","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","message","className","type","placeholder","required","onChange","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","src","width","height","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createAt","Date","now","creatorId","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onderBy","onSnapshot","snapshot","newArray","docs","map","document","data","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.75939a0d.chunk.js","sourcesContent":["import  firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/firestore\"\nimport \"firebase/compat/storage\"; // 스토리지 임포트\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL:process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_API_ID\n  };\n\n  firebase.initializeApp(firebaseConfig);\n\n  export const firebaseInstance = firebase;\n  export const dbService = firebase.firestore();\n  export const authService = firebase.auth(); \n  export const storageService = firebase.storage();\n  ","import {useState} from \"react\";\nimport { authService} from \"../firebase\";\n\nconst AuthForm = () => {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\") \n    \n    const onChang = (event) => {\n        const {\n            target : {name, value},\n        } = event;\n        if(name === \"email\"){\n            setEmail(value);\n        }\n        else if(name === \"password\"){\n            setPassword(value)\n        }\n    };\n    const onSubmit = async(event) => { //회원가입 분기 시기는 함수\n        event.preventDefault();\n        try{\n            let data;\n            if(newAccount){\n                //creat newAccount\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            }else {\n                //log in\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            }\n           \n        }catch(error){\n           setError(error.message)\n        }\n    };\n    const toggleAccount = () => setNewAccount((prev)=> !prev);\n    return (     \n        <>\n            <form onSubmit= {onSubmit} className=\"container\">\n                <input \n                name =\"email\"\n                type =\"email\" \n                placeholder =\"Email\" \n                required\n                value ={email}\n                onChange={onChang} \n                className= \"authInput\"\n                />\n                <input\n                name = \"password\" \n                type =\"password\" \n                placeholder=\"password\" \n                required\n                value = {password}\n                onChange ={onChang} \n                className = \"authInput\"\n                />\n                <input \n                type =\"submit\" \n                value = {newAccount ? \"create Account\" : \"Log In\"}\n                className = \"authInput authSubmit\"\n                />\n                {error &&<span className =\"authError\">{error}</span>}\n            </form>\n            <span onClick ={toggleAccount} className=\"authSwith\">\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n                </span>\n            </>\n    )\n\n};\n\n\n    export default AuthForm;","import AuthForm from \"components/AuthForm\";\nimport { authService , firebaseInstance} from \"../firebase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n    const onSocialClick = async (event) =>{\n       const {\n           target: {name},\n       } = event;\n       let provider;\n       if(name === \"google\"){\n           provider = new firebaseInstance.auth.GoogleAuthProvider();\n       } else if(name === \"github\"){\n           provider = new firebaseInstance.auth.GithubAuthProvider();\n       }\n       const data = await authService.signInWithPopup(provider);\n    } \n\n    return (     \n        <div className= \"authContainer\">\n            <FontAwesomeIcon\n            icon ={faTwitter}\n            color={\"#04AAFF\"}\n            size=\"3x\"\n            style={{ marginBottom: 30}}\n            />\n            <AuthForm />\n            <div className= \"authBtns\">\n                <button onClick ={onSocialClick} name = \"google\" className=\"authBtn\">Continue with Google<FontAwesomeIcon icon={faGoogle}/></button>\n                <button onClick ={onSocialClick} name = \"github\" className=\"authBtn\">Continue with Github<FontAwesomeIcon icon={faGithub}/></button>\n            </div>\n            </div>\n    )\n}\nexport default Auth;","import { dbService , storageService } from \"firebase\";\nimport {useState} from \"react\" // 트위터 수정기능을 위한 상태 변경 수정 버튼을 눌렀을 때 화면에 출력해야하는 요소를 위해 2가지 상태를 관리\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faTrash, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\n\n\n\n\nconst Tweet = ({tweetObj, isOwner}) => {\n    const [editing, setEditing] = useState(false); //트윗 수정기능1\n    const [newTweet, setNewTweet] = useState(tweetObj.text); // 트위터 수정기능2\n\n    const onDeleteClick = async () => { // 삭제 버튼을 눌렀을때 경고 메세지가 나오면서 확인/취소 창이 나오고 확인을 눌렀을때 true/ 취소 false 가 나오고 삭제해주는 버튼함수\n        const ok = window.confirm(\"삭제 할거임??\");\n       \n        if(ok){\n           await dbService.doc(`tweets/${tweetObj.id}`).delete();\n           if(tweetObj.attachmentUrl !== \"\")\n           await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev)=> !prev); // 수정버튼을 눌렀을때 텍스트가 수정이 되게 하는 함수 \n\n    const onChange = (event) => { // 수정한 내용으로 바꿔주는 함수 \n        const{\n            target : {value},\n        } = event;\n        setNewTweet(value);\n    }\n    const onSubmit = async(event) =>{ // 파이어 베이스에 새로 입력된 값을 반영하는 함수\n        event.preventDefault();\n        await dbService.doc(`Tweets/${tweetObj.id}`).update({ text: newTweet});\n    }\n    return (\n        <div className= \"nweet\"> \n            {editing ? (\n                <>\n                <form onSubmit={onSubmit} className=\"container nweeEdit\">\n                    <input onChange ={onChange}\n                     value={newTweet} \n                     required\n                     placeholder=\"Edit your nweet\"\n                     autoFocus\n                     className =\"formInput\"\n                     />\n                    <input type =\"submit\" value = \"Update Tweet\" className=\"formBtn\"/>\n                </form>\n                <button onClick={toggleEditing} className =\"formBtn cancelBtn\">Cancle</button>\n                </>\n            ): (\n                <>\n                <h4>{tweetObj.text}</h4>\n                {tweetObj.attachmentUrl && (\n                    <img src= {tweetObj.attachmentUrl} width =\"50px\" height =\"50px\" />\n                )}\n                {isOwner && (\n                    <div className=\"nweet__actions\">\n                        <span onClick={onDeleteClick}>\n                        <FontAwesomeIcon icon={faTrash} />\n                        </span>\n                        <span onClick={toggleEditing}>\n                        <FontAwesomeIcon icon={faPencilAlt} />\n                        </span>\n                    </div>\n                )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Tweet;","import {useState} from \"react\";\nimport { dbService, storageService } from \"firebase\";\nimport {v4 as uuidv4} from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faPlus, faTimes} from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({userObj}) => {\n\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\")\n\n    const onSubmit = async(event) =>{\n        event.preventDefault();\n        if(tweet === \"\"){\n            return;\n        }\n        let attachmentUrl = \"\";\n        if(attachment !== \"\"){\n        const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        const attachmentUrl = await response.ref.getDownloadURL();\n        }\n         await dbService.collection(\"tweets\").add({\n            text : tweet,\n            createAt : Date.now(),\n            creatorId : userObj.uid,\n            attachmentUrl,\n        });\n        setTweet(\"\");\n        setAttachment(\"\");\n    };\n\n    const onChang = (event) => {\n        event.preventDefault();\n        const {\n            target: {value},\n        } = event;\n        setTweet(value);\n    }\n\n    const onFileChange = (event) => {\n        const {\n            target : { files },\n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) =>{\n            const {\n                currentTarget: { result},\n            } = finishedEvent;\n            setAttachment(result);\n        };\n       if(Boolean(theFile)){\n           reader.readAsDataURL(theFile);\n       }\n    };\n    const onClearAttachment = () => setAttachment(\"\");\n\n    return (\n      <form onSubmit= {onSubmit} className =\"factoryForm\">\n          <div className=\"factoryInput__container\">\n          <input className=\"factoryInput__input\"\n          value = {tweet}\n          onChange ={onChang}\n          type = \"text\"\n          placeholder = \"What`s on your mind?\"\n          maxLength={120}\n          />\n         <input type =\"submit\" value = \"&rarr;\" className=\"factoryInput__arrow\" />\n         </div>\n         <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n            <span>Add photos</span>\n            <FontAwesomeIcon icon={faPlus} />\n         </label>\n        <input type =\"file\" accept=\"image/*\" onChange ={onFileChange} style={{opacity:0,}}/>\n        {attachment && (\n            <div className=\"factoryForm__attachment\">\n             <img src ={attachment} style={{\n                 backgroundImage: attachment,\n             }}\n             />\n             <div className =\"factoryForm__clear\" onClick={onClearAttachment}>\n                 <span>Remove</span>\n                 <FontAwesomeIcon icon={faTimes}/>\n            </div>\n            </div>\n            )}\n      </form>\n      );\n};\n\nexport default TweetFactory;","import { useEffect,useState} from 'react';\nimport { dbService} from 'firebase';\nimport Tweet from \"components/Tweet\";\n\nimport TweetFactory from 'components/TweetFactory';\n\nconst Home = ({userObj}) => {\n    \n    \n    const [tweets, setTweets] = useState([]) // 받은 데이터로 게사물 목록을 만들기 위한 useState\n  \n    \n    useEffect(()=>{\n        dbService.collection(\"tweets\").onderBy(\"creatAt\", \"desc\").onSnapshot((snapshot)=>{\n            const newArray = snapshot.docs.map((document)=>({\n                id: document.id,\n                ...document.data(),\n            }));\n            setTweets(newArray);\n        });\n    },[]);\n\n    \n   \n\n    return (\n        <div className=\"container\">\n        <TweetFactory userObj ={userObj}/>\n      <div style={{\n          marginTop :30\n      }}>\n        {tweets.map((tweet)=>( //트윗 목록이 보이는 맵핑!\n        // Tweet.js로 연결\n            <Tweet key={tweet.id} tweetObj = {tweet}\n            isOwner ={tweet.creatorId === userObj.uid}\n            />\n        ))}\n      </div>\n      </div>\n    );\n};\n\nexport default Home;","import { authService, dbService } from \"../firebase\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState} from \"react\";\n\n\nconst Profile = ({userObj, refreshUser }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const onLogOutClick =() =>{\n        authService.signOut();\n        history.push(\"/\")\n    };\n\n    const onChange =(event) => {\n        const {\n            target: {value}\n        } =event;\n        setNewDisplayName(value);\n    };\n\n    const onSubmit =async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({ displayName : newDisplayName });\n            refreshUser();\n        }\n    };\n\n\n    //주소 이동 로그아웃 될시 \n    return (\n        <div className=\"container\">\n        <form onSubmit ={onSubmit} className=\"profileForm\">\n        <input type =\"text\" placeholder= \"DisplayName\" onChange ={onChange} value={newDisplayName} autoFocus className=\"formInput\"/>\n        <input type =\"submit\" value = \"Update Profile\" className=\"formBtn\" style={{marginTop : 10,}}/>\n        </form>\n       <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>Log Out</span>\n        </div>\n    );\n};\n\nexport default Profile;","import {Link} from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\";\nconst Navigation = ({userObj}) => {\n    return <nav>\n    <ul style={{\n        display: \"flex\",\n        justifyContent:\"center\",\n        marginTop : 50\n    }}>\n        <li>\n            <Link to = \"/\" style={{marginRight: 10}}>\n                <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size= \"2x\" />\n                </Link>\n        </li>\n        <li>\n            <Link to = \"/profile\" style={{\n                marginLeft: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                fontSize: 12,\n            }}>\n                <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                <span style={{marginTop : 10}}>\n                    {userObj.displayName ? `${userObj.display}의 Profile` : \"Profile\"}\n                </span>\n            </Link>\n        </li>\n    </ul>\n    </nav>\n};\n\nexport default Navigation;","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Profile from 'routes/Profile';\nimport Navigation from './Navigation';\n\n\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => { /*상위 컴포넌트에서 받은 프롭스는 구조분해 할당으로 사용*/\n  \n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n      {isLoggedIn ? (\n        <div\n        style={{\n          maxWidth: 890,\n          width: \"100%\",\n          margin: \"0 auto\",\n          marginTop: 80,\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n        >\n        <Route exact={true} path = \"/\">\n          <Home userObj={userObj}/>\n        </Route>\n        <Route exact={true} path = \"/profile\">\n        <Profile refreshUser={refreshUser} userObj= {userObj} />\n      </Route>\n      </div>\n      ) : (\n        <Route exact = {true}>\n          <Auth />\n        </Route>\n      )}\n      \n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n\n\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useEffect,useState} from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"../firebase\";\n\n\n\nfunction App(){\n  const [init, setInit] = useState(false)\n  const [userObj, setUserObj] = useState(null); // 트윗을 작성한 유저 정보를 보여주기 위한 useState\n\n\n  useEffect(()=>{\n    authService.onAuthStateChanged((user) =>{\n      if(user){\n        setUserObj({\n          uid: user.uid,\n          displayName : user.displayName,\n          updateProfile: (args)=> user.updateProfile(args),\n        });\n      }\n      else {\n      setUserObj(false);\n      }\n      setInit(true);\n    });\n\n  },[]);\n\n  const refreshUser = () => { // 함수가 실행되면 인증 모듈에서 authService.currentUser를 통해 얻은 새 user를 업데이트 해줌.\n   const user = authService.currentUser;\n   setUserObj({\n     uid: user.uid,\n     displayName: user.displayName,\n     updateProfile: (args) => user.updateProfile(args),\n   })\n  }\n  \n  return (\n  <>\n  { init ? <AppRouter \n  isLoggedIn ={Boolean(userObj)} \n  userObj ={userObj} \n  refreshUser ={refreshUser}\n  /> : \"initializing...\"}\n  </>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App'\nimport \"./styles.css\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}